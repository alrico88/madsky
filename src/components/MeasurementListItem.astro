---
interface Props {
  id: number;
  color: string;
  date: Date;
}

const { props } = Astro;

import { getContrastColor } from "../helpers/color";
import { ColorPreview } from "./ColorPreview";
import TimePreview from "./TimePreview.astro";
import { defaultPng } from "../helpers/image";

const textColor = getContrastColor(props.color);
---

<div
  class="grid on-hover position-relative"
  style={{
    backgroundColor: props.color,
    borderTopColor: textColor,
    borderBottomColor: textColor,
  }}
  data-id={props.id}
>
  <div class="position-absolute h-100 w-100 text-center">
    <img
      data-id={props.id}
      src={defaultPng}
      alt={props.date.toISOString()}
      class="w-100 h-100 d-none"
    />
  </div>
  <div
    class="position-absolute h-100 w-100 hstack justify-content-between align-items-center p-0"
  >
  </div>
  <div
    class="position-absolute h-100 w-100 hstack justify-content-between align-items-center p-2"
    data-id={props.id}
  >
    <div>
      <ColorPreview
        class="text-small"
        color={props.color}
        textColor={textColor}
        client:only
      />
    </div>
    <TimePreview
      color={props.color}
      textColor={textColor}
      id={props.id}
      date={props.date}
    />
  </div>
</div>

<script>
  import { $fetch } from "ofetch";
  import { defaultPng } from "../helpers/image";

  async function handleClick(e: PointerEvent) {
    const currElement = e.target as HTMLElement;
    const id = currElement.getAttribute("data-id");

    const currImg = document.querySelector(`img[data-id="${id}"]`);

    currImg?.classList.toggle("d-none");
    currImg?.closest(".on-hover")?.classList.toggle("toggled");

    if (!currImg || currImg.getAttribute("src") != defaultPng) {
      return;
    }

    const src = await $fetch<{
      image: string;
    }>(`/api/measurement/id/${id}`);

    const fullUrl = `data:image/png;base64,${src.image}`;

    currImg.setAttribute("src", fullUrl);
  }

  document.querySelectorAll(".on-hover").forEach((d) => {
    d.addEventListener("click", (e) => {
      handleClick(e as PointerEvent);
    });
  });
</script>

<style>
  .grid {
    height: 50px;
    transition: height 0.2s ease-in-out;

    &.toggled {
      height: 400px;
      border-top: 1px solid transparent;
      border-bottom: 1px solid transparent;
    }

    img {
      object-fit: contain;
    }
  }
</style>
